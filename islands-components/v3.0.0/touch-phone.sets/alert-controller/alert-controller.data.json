{
  "name": "alert-controller",
  "description": [
    {
      "level": "touch-phone.blocks",
      "tech": "desc.wiki",
      "content": {
        "block": "b-text",
        "content": [
          {
            "elem": "p",
            "content": [
              "Контроллер для связи блоков, от которых нужно показать сообщение, с блоком alert."
            ]
          }
        ]
      }
    },
    {
      "level": "touch-phone.blocks",
      "tech": "desc.md",
      "content": "<h2 id=\"-\">Описание</h2>\n<p>Блок <code>alert-controller</code> – медиатор, обеспечивающий взаимосвязь между блоком источником сообщения и блоком отображающим сообщение (<a href=\"./alert.html\"><code>alert</code></a>).  Сообщения могут быть трех типов: информационное, об ошибке и блокирующее.</p>\n<p>Связь осуществляется с помощью абстрактного блока не имеющего визуального представления <code>alert-message</code>, который является вспомогательным для вызова сообщений.</p>\n<p><code>alert-controller</code> ищет все блоки <code>alert-message</code> внутри себя расположенные на странице (блок <code>b-page</code>) и слушает(подписывается на события) кастомные БЭМ-события на всех найденных экземплярах. </p>\n<p>Блок-источник – это любой блок, из кода которого может вызываться <code>alert</code>.   </p>\n<p>Вызов выполняется следующим образом:</p>\n<ul>\n<li>К каждому блоку-источнику примисковывается блок <code>alert-message</code> (для удобства использования).</li>\n<li>Затем на блоке <code>alert-message</code> триггерится соответствующее событие, для показа нужного сообщения.</li>\n</ul>\n<p>На странице всегда отображается только одно сообщение. Поскольку перед каждым показом нового сообщения все существующие удаляются.</p>\n<h3 id=\"-\">Объявление блока на странице</h3>\n<p>BEMJSON для подключения блока:</p>\n<pre><code class=\"lang-js\">({\n    block: &#39;b-page&#39;,\n    mix: [{\n        block: &#39;i-services-request-controller&#39;,\n        js: true\n    },{\n        block: &#39;alert-controller&#39;, // блок-контроллер\n        js: { // задания текста по умолчанию для каждого типа сообщения  \n            message: {\n                error: &#39;Упс, что-то пошло не так&amp;hellip; &lt;br/&gt; Попробуйте поискать снова&#39;,\n                block: &#39;Все сломалось!&#39;,\n                info: &#39;Все суперпупер круто, &lt;br/&gt; продолжайте в том же духе&#39;\n            },\n            buttonTxt: &#39;Обновить&#39;\n        }\n    }],\n    title: &#39;заголовок&#39;,\n    head: [...],\n    content: [\n        {\n            block: &#39;button&#39;, // блок-источник сообщения\n            js: true,\n            mods: { \n                type: &#39;simple&#39;,\n                message: &#39;error&#39; // тип сообщения.     \n            },\n            mix: [{block: &#39;alert-message&#39;}],// подмешивание блока `alert-message` \n            content: &#39;Показать сообщение об ошибке&#39;\n        },\n        ...\n    ]\n});</code></pre>\n<h3 id=\"js-\">JS-параметры блока</h3>\n<ul>\n<li><p><code>{Object} message</code> – предназначен для задания текста сообщения по умолчанию каждому типу сообщения:</p>\n<ul>\n<li><code>info</code> - информационное;</li>\n<li><code>error</code> - об ошибке;</li>\n<li><code>block</code> – блокирующее.</li>\n</ul>\n</li>\n<li><p><code>{String} buttonTxt</code> – текст кнопки для блокирующего сообщения.</p>\n</li>\n</ul>\n<p>На уровне проекта можно переопределить текст сообщения по умолчанию  при генерации одного из БЭМ-событий блока <code>alert-message</code>. Для этого ему передается в качестве данных объект с параметрами <code>message</code> и <code>buttonTxt</code>(только для блокирующего сообщения).</p>\n<p><a href=\"https://github.yandex-team.ru/lego/islands-components/blob/dev/touch-phone.blocks/alert/alert.examples/10-simple.blocks/button/_message/button_message_block.js\">пример переопределния текста для блокирующего сообщения</a></p>\n<pre><code class=\"lang-js\">BEM.DOM.decl({name: &#39;button&#39;, modName: &#39;message&#39;, modVal: &#39;block&#39;}, {\n    onSetMod: {\n        js: function() {\n            // переопределяем дефолтный текст для блокирующего типа\n            this.bindTo(&#39;tap&#39;, function() {\n                this.findBlockOn(&#39;alert-message&#39;).trigger(&#39;alertBlock&#39;,\n                    {\n                        message: &#39;Что-то пошло не так. &lt;br/&gt; Попробуйте обновить страницу.&#39;,\n                        buttonTxt: &#39;Обновить&#39;\n                    }\n                );\n            });\n        }\n    }\n});</code></pre>\n<h3 id=\"-\">Положение и время показа сообщения</h3>\n<p>Для показа сообщения блок <code>alert-controller</code> генерирует блок <code>popup</code> c вложенным блоком <code>alert</code>, в котором отображается сообщение.</p>\n<p>Перед показом скрывается саджест, положение попапа и время его показа зависит от типа сообщения.</p>\n<p>Блокирующее сообщение отображается в модальном окне, содержит кнопку  и располагается строго по центру страницы. Скрывается только по тапу на кнопку или выполняет кастомное действие по нажатию на кнопку, если такое было задано.</p>\n<p>Окно сообщения об ошибке и информационное отображаются под шапкой страницы, если она в области видимости, иначе – сверху экрана и скрываются через 5 секунд после показа. </p>\n"
    }
  ]
}